<dataroot xmlns:od="urn:schemas-microsoft-com:officedata">
<T_Info>
<ID_Info>CodeCls</ID_Info>
<ID_Lang>1036</ID_Lang>
<Code>' ------------------------------------------------------
' Name:     CSordFormColumn
' Kind:     Module de classe
' Purpose:  Tri sur les colonnes d'un form en continu.
' Author:   Laurent
' Date:     18/04/2022
' DateMod:  02/05/2022-10:04
'
'   Utilisation dans le Formulaire :
'   ==============================
'
'   Private CSordForm As CsordFormColumn
'
'   Private Sub Form_Close()
'       Set CSordForm = Nothing      '// Recommended, clean mem.
'   End Sub
'
'
'   Utilisation dans le Controle :
'   ============================
'
'Private Sub ID_Supplier_cmd_Click()
'   if sufix (len 4) is defined, the classe use 'ID_Supplier' for Field name.
'   SordColumn
'End Sub
'
'       OR
'
'Private Sub CompanyTest_NameTest_cmd_Click()
'   Pass Field name, beacause the classe can't use this name for field
'   SordColumn "Company_Name", OptionOn
'End Sub
'
'   Créate this function or sub in your form
'   ========================================
'
'Private Function SordColumn(Optional eActiveImage As T_OnOff = OptionOff, _
'                            Optional eActiveTexte As T_OnOff = OptionOn, _
'                            Optional sPicAsc As String = vbNullString, _
'                            Optional sPicDesc As String = vbNullString, _
'                            Optional sFieldName As String = vbNullString) As Boolean
'
'    Dim bRet As Boolean
'
'    '// Initialisation de la classe, on peut indiquer, si besoin, le préfixe et/ou le suffixe (nb de car).
'    '// Init class and defined suffix (the class cuts automatically the button name for extact field name)
'    If (m_CSordForm Is Nothing) Then
'        Set m_CSordForm = New CsordFormColumn
'        m_CSordForm.FieldPrefixLen = 0
'        m_CSordForm.FieldSuffixLen = 4
'    End If
'
'    With m_CSordForm
'        .PictureOn = eActiveImage   '// Optional (Default Off) si On, active les images par defaut.
'        .TexteOn = eActiveTexte     '// Optional (Default On)
'        '.TexteColor = 2366701       '// Optional (Default see const 'TXT_COULSORD' in class)
'        '.PicturePath = "\Res\"      '// Optional (Sous dossier des images, Default CurrentProject.Path + Const 'IMG_FOLDER' in class)
'        .PictureASC = sPicAsc       '// Optional (see const 'IMG_ASC' in class)
'        .PictureDESC = sPicDesc     '// Optional (see const 'IMG_DESC' in class)
'
'        bRet = .SordNow(sFieldName)     '// Execute le tri, retour TRUE if ok, 'sFieldName' is optional.
'
'    End With
'
'    Me.ID_Supplier.SetFocus
'
'    If (bRet = False) Then
'        '// Your code here
'        '// Your code here
'    End If
'
'End Function
' ------------------------------------------------------
    '// Defaut paramètres.
    Private Const DEF_TXTFONTWEIGHT As Long = 700               '// Bold
    Private Const DEF_TXTCOLOR      As Long = 1137349           '// Couleur with sord  (m_objButton)
    Private Const DEF_IMGFOLDER     As String = "PICDEFFOLDER" '// Default folder for picture (currentProject.path + DEF_IMGFOLDER)
    Private Const DEF_IMGASC        As String = "PICDEFIMGASC"  '// (m_objButton)
    Private Const DEF_IMGDESC       As String = "PICDEFIMGDESC" '// (m_objButton)
    Private Const SORD_ASC          As String = " ASC"
    Private Const SORD_DESC         As String = " DESC"
    '// ON/OFF picture and/or caption texte.
    Public Enum T_OnOff
        OptionOff = False
        OptionOn = True
    End Enum
    Private m_eTexteOn          As T_OnOff      '// Indique si mettre color et bold sur le texte du bouton (on par defaut).
    Private m_ePictureOn        As T_OnOff      '// Indique si il faut afficher une image dans le bouton (off par defaut).
    Private Enum T_Sord
        eAsc = 1
        eDESC = 2
    End Enum
    Private m_eCurrentSord      As T_Sord           '// Sens du tri en cours (1 asc, 2 desc).
    Private m_bCheckOk          As Boolean          '// Flag if error occured.
    Private m_objForm           As Form             '// Form parent du control(sur lequel appliquer le tri).
    Private m_objButton         As CommandButton    '// Control bouton cliquer à utiliser.
    Private m_sButtonOldName    As String           '// Nom du control précedement modifier.
    Private m_sFieldName        As String           '// Champ sur lequel appliquer le tri.
    Private m_iFieldPrefixLen   As Integer          '// Préfix name for button.name
    Private m_iFieldSuffixLen   As Integer          '// Suffix name for button.name
    '// Paramètre pour m_objButton.
    Private m_lTxtColor         As Long             '// Indique la couleur à utiliser.
    Private m_sPicturePath      As String
    Private m_sPictureAsc       As String           '// Image tri pour ASC.
    Private m_sPictureDesc      As String           '// Image tri pour DESC.
    Private m_sPictureSord      As String           '// Image a afficher suivant le tri en cours (ASC ou DESC).
    '// Sauvegarde des propriétés du form/button avant modification.
    Private m_sSvFrmSord        As String           '// Sauvegarde les paramètres de tri d'origine.
    Private m_bSvFrmSortOn      As Boolean          '//             ""
    Private m_lSvTxtColor       As Long
    Private m_lSvTxtFontW       As Long
    Private m_eSvPicArr         As AcPictureCaptionArrangement
    Private m_SvPicType         As Byte             '// 0 incorporée, 1 liée
    Private m_vSvPicData        As Variant          '// Pour PicType = 0 (pictureData)
    Private m_sSvPicFile        As String           '// Pour PicType = 1 (Path and picture file)
'//----------------------------------       INIT/TERM       ----------------------------------
Private Sub Class_Initialize()
    '// TOUT est OK par défaut.
    m_bCheckOk = True
    m_sFieldName = "*"
'MODE:
    m_sPicturePath = CurrentProject.Path &amp; DEF_IMGFOLDER
    m_sPictureAsc = DEF_IMGASC
    m_sPictureDesc = DEF_IMGDESC
    m_lTxtColor = DEF_TXTCOLOR
End Sub
Private Sub class_Terminate()
    '// Restaure les filtres du form.
    If (Not m_objForm Is Nothing) Then
        m_objForm.OrderBy = m_sSvFrmSord
        m_objForm.OrderByOn = m_bSvFrmSortOn
    End If
    Set m_objButton = Nothing
    Set m_objForm = Nothing
End Sub
'//---------------------------------------------------------------------------------------
'//==================================       PROP        ==================================
Public Property Get FieldPrefixLen() As Integer
    FieldPrefixLen = m_iFieldPrefixLen
End Property
Public Property Let FieldPrefixLen(NewFieldPrefixLen As Integer)
    m_iFieldPrefixLen = 0
    If (NewFieldPrefixLen &gt;= 0) Then m_iFieldPrefixLen = NewFieldPrefixLen
End Property
Public Property Get FieldSuffixLen() As Integer
    FieldSuffixLen = m_iFieldSuffixLen
End Property
Public Property Let FieldSuffixLen(NewFieldSuffixLen As Integer)
    m_iFieldSuffixLen = 0
    If (NewFieldSuffixLen &gt;= 0) Then m_iFieldSuffixLen = NewFieldSuffixLen
End Property
'// Texte On
Public Property Get TexteOn() As T_OnOff
    TexteOn = m_eTexteOn
End Property
Public Property Let TexteOn(ActiveTexte As T_OnOff)
    m_eTexteOn = IIf(m_bCheckOk, ActiveTexte, OptionOff)
End Property
'// Texte Color
Public Property Get TexteColor() As Long
    TexteColor = m_lTxtColor
End Property
Public Property Let TexteColor(NewColor As Long)
    m_lTxtColor = IIf((NewColor &lt; 1), DEF_TXTCOLOR, NewColor)
    Me.TexteOn = OptionOn
End Property
'// Picture On
Public Property Get PictureOn() As T_OnOff
    PictureOn = m_ePictureOn
End Property
Public Property Let PictureOn(ActivePicture As T_OnOff)
    '// Si pas d'erreur sur Dossier ou image, mettre à jour.
    m_ePictureOn = IIf(m_bCheckOk, ActivePicture, OptionOff)
End Property
'// Picture Path
Public Property Get PicturePath() As String
    PicturePath = m_sPicturePath
End Property
Public Property Let PicturePath(NewPath As String)
    '// Evite les messages redondants.
    If (m_bCheckOk = False) Then Exit Property
    '// Le dossier existe ?
    If (CheckFolderExists(NewPath) = False) Then
        MsgBox "Sous-Dossier '" &amp; NewPath &amp; "', non trouver", vbExclamation + vbOKOnly, "PicturePath"
        m_bCheckOk = False
        PictureOn = OptionOff
        Exit Property
    End If
    '// Vérifier si fini bien par '\'.
    If (Right$(NewPath, 1) &lt;&gt; "\") Then NewPath = NewPath &amp; "\"
    m_sPicturePath = NewPath
End Property
'// Picture for sord asc
Public Property Get PictureASC() As String
    PictureASC = m_sPictureAsc
End Property
Public Property Let PictureASC(NewFileName As String)
    '// OFF, rien a faire on sort.
    '// Evite les messages répétitif d'érreur.
    If (m_ePictureOn = OptionOff) Then Exit Property
    '// Img vide, et img par défaut déjà appliquer, on sort.
    If (NewFileName = vbNullString) And (m_sPictureAsc = DEF_IMGASC) Then Exit Property
    '// Vide applique img par défaut.
    If (NewFileName = vbNullString) Then NewFileName = DEF_IMGASC
    '// Le fichier existe ?
    If (CheckFileExist(m_sPicturePath &amp; NewFileName) = False) Then
        MsgBox "Fichier " &amp; vbCrLf &amp; NewFileName &amp; vbCrLf &amp; " non trouver.", vbExclamation, "PictureASC"
        m_bCheckOk = False
        m_ePictureOn = OptionOff
        Exit Property
    End If
    m_sPictureAsc = NewFileName
    m_ePictureOn = OptionOn
End Property
'// Picture for sord desc
Public Property Get PictureDESC() As String
    PictureDESC = m_sPictureDesc
End Property
Public Property Let PictureDESC(NewFileName As String)
    '// OFF, rien a faire on sort.
    '// Evite les messages répétitif d'érreur.
    If (m_ePictureOn = OptionOff) Then Exit Property
    '// Img vide, et img par défaut déjà appliquer, on sort.
    If (NewFileName = vbNullString) And (m_sPictureDesc = DEF_IMGDESC) Then Exit Property
    '// Vide applique img par défaut.
    If (NewFileName = vbNullString) Then NewFileName = DEF_IMGDESC
    '// Le fichier existe ?
    If (CheckFileExist(m_sPicturePath &amp; NewFileName) = False) Then
        MsgBox "Fichier " &amp; vbCrLf &amp; NewFileName &amp; vbCrLf &amp; " non trouver.", vbExclamation, "PictureDESC"
        m_bCheckOk = False
        m_ePictureOn = OptionOff
        Exit Property
    End If
    m_sPictureDesc = NewFileName
    m_ePictureOn = OptionOn
End Property
Private Property Get GetFSO() As Object
    Static pFSO               As Object
    If pFSO Is Nothing Then
        Set pFSO = CreateObject("Scripting.FileSystemObject")
    End If
    Set GetFSO = pFSO
End Property
'//=======================================================================================
'// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ PUBLIC SUB/FUNC   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Public Function SordNow(Optional sFieldName As String = vbNullString) As Boolean
    On Error GoTo ERR_SordNow
    DoCmd.Echo False    'TODO: DoCmd.Echo
    '// Initialise le form, le bouton, si besoin...
    InitObjets
    If (m_bCheckOk = False) Then GoTo SORTIE_SordNow     '// Erreur on sort.
    '// Défini le champs, si changement de CommandButton.
    If (m_sButtonOldName &lt;&gt; m_objButton.Name) Then
        SetFieldName sFieldName
        If (m_bCheckOk = False) Then GoTo SORTIE_SordNow      '// Erreur on sort.
    End If
    '// On inverse le tri.
    Dim sCurSord As String
    '// Determine le texte et l'image as utilisés suivant le sens du tri.
    Select Case m_eCurrentSord
        Case eAsc
            m_eCurrentSord = eDESC
            sCurSord = SORD_ASC
            m_sPictureSord = m_sPicturePath &amp; m_sPictureAsc
        Case eDESC
            m_eCurrentSord = eAsc
            sCurSord = SORD_DESC
            m_sPictureSord = m_sPicturePath &amp; m_sPictureDesc
    End Select
    '// Initialise le control cliquer...
    SavePropButton      '// Sauvegarde le bouton en cours...
    UpdatePropButton    '// MàJ du bouton en cours...
    '// Applique le tri.
    m_objForm.OrderBy = m_sFieldName &amp; sCurSord
    m_objForm.OrderByOn = True
SORTIE_SordNow:
    SordNow = m_bCheckOk
    DoCmd.Echo True     'TODO:DoCmd.Echo
    Exit Function
ERR_SordNow:
    MsgBox "Erreur " &amp; Err.Number &amp; vbCrLf &amp; _
            " (" &amp; Err.Description &amp; ")" &amp; vbCrLf &amp; _
            "Dans  TriSurFormContinu.CSordFormColumn.SordNow, ligne " &amp; Erl &amp; "."
    m_bCheckOk = False
    Resume SORTIE_SordNow
End Function
'// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
'// ######################## PRIVATE SUB/FUNC ###########################################
' ----------------------------------------------------------------
' Procedure Nom:    SetFieldName
' Sujet:            Initialisation du champ de tri.
'                   Si null on utilise le nom du bouton, on vérifier si pref/suff.
'                   Si même nom que précedement, on fait rien.
'                   On vérifie si le nom est valide dans la table.
'                   On remet les options aux valeurs par défaut.
' Procedure Kind:   Sub
' Procedure Access: Private
'
'=== Paramètres ===
' NewFieldName (String): Nom du champs à utiliser.
'==================
'
' Author:  Laurent
' Date:    01/05/2022 - 14:42
' DateMod:
'
' !Use! : CheckPrefixSuffix, CheckFieldName, RestorePropButton.
' ----------------------------------------------------------------
Private Sub SetFieldName(NewFieldName As String)
    '// Meme champ, rien a faire on sort.
    If (m_sFieldName = NewFieldName) Then Exit Sub
    Dim sTmpField As String
    sTmpField = NewFieldName
    '// ...Pas de nom de champ passer, on utilise le nom du commandButton...
    If (NewFieldName = vbNullString) Then sTmpField = CheckPrefixSuffix(m_objButton.Name)
    '// ...Vérifier la validité du champ...
    CheckFieldName sTmpField
    If (m_bCheckOk = False) Then Exit Sub
    '// ...Nouveau champ, Restaure le commandButton précédent...
    RestorePropButton
    '// Place les options par défaut, remet le tri a DESC.
    m_eCurrentSord = eAsc
    '// On stock le nom du champ.
    m_sFieldName = sTmpField
End Sub
Private Sub InitObjets()
    '// ...Initialisation du form, si pas déjà fait...
    CheckForm
    If (m_bCheckOk = False) Then Exit Sub
    '// ...Initialise le bouton, si pas deja fait...
    CheckButton Screen.ActiveControl
    If (m_bCheckOk = False) Then Exit Sub
End Sub
Private Sub SavePropButton()
    '// Rien a faire, meme bouton, on sort.
    If (m_sButtonOldName = m_objButton.Name) Then Exit Sub
    '// Sauvegarde des propriétés, si nouveau bouton...
    m_lSvTxtFontW = m_objButton.FontWeight
    m_lSvTxtColor = m_objButton.ForeColor
    m_SvPicType = m_objButton.PictureType
    m_eSvPicArr = m_objButton.PictureCaptionArrangement
    Select Case m_SvPicType
        Case 0
            m_vSvPicData = m_objButton.PictureData
        Case Else
            m_sSvPicFile = m_objButton.Picture
    End Select
    m_sButtonOldName = m_objButton.Name
End Sub
Private Sub RestorePropButton()
    '// Rien a faire, 1er bouton ou même bouton, on sort.
    If ((m_sButtonOldName = vbNullString) Or (m_sButtonOldName = m_objButton.Name)) Then Exit Sub
    '// Texte.
    m_objForm(m_sButtonOldName).ForeColor = m_lSvTxtColor
    m_objForm(m_sButtonOldName).FontWeight = m_lSvTxtFontW
    '// Image.
    m_objForm(m_sButtonOldName).PictureType = m_SvPicType
    m_objForm(m_sButtonOldName).PictureCaptionArrangement = m_eSvPicArr
    Select Case m_SvPicType
        Case 0
            m_objForm(m_sButtonOldName).PictureData = m_vSvPicData
        Case Else
            m_objForm(m_sButtonOldName).Picture = m_sSvPicFile
    End Select
End Sub
Private Sub UpdatePropButton()
    '// Rien a faire, on sort.
    If (m_eTexteOn = OptionOff And m_ePictureOn = OptionOff) Then Exit Sub
    '// On Modifie le control.
    If m_eTexteOn Then
        m_objButton.FontWeight = DEF_TXTFONTWEIGHT
        m_objButton.ForeColor = m_lTxtColor
    End If
    If m_ePictureOn Then
        m_objButton.PictureCaptionArrangement = acLeft
        m_objButton.PictureType = 1
        m_objButton.Picture = m_sPictureSord
    End If
End Sub
' ----------------------------------------------------------------
' Procedure Nom:    CheckForm
' Sujet:            Vérifier si le form as bien était initialiser
' Procedure Kind:   Sub
' Procedure Access: Private
' Return Type:      Boolean TRUE si pas de problème.
' Author:           Laurent
' Date:             20/04/2022 - 06:37
' DateModif:        22/04/2022 - 09:04
' ----------------------------------------------------------------
Private Sub CheckForm()
    On Error GoTo ERR_CheckForm
    '// Initialise le form sur lequel appliquer le tri,
    '// Sauvegarde des filtres en cours.
    If (m_objForm Is Nothing) Then
        Set m_objForm = Screen.ActiveForm
        m_sSvFrmSord = m_objForm.OrderBy
        m_bSvFrmSortOn = m_objForm.OrderByOn
    End If
    m_bCheckOk = True
SORTIE_CheckForm:
    Exit Sub
ERR_CheckForm:
    MsgBox "Erreur " &amp; Err.Number &amp; vbCrLf &amp; _
            "(" &amp; Err.Description &amp; ")" &amp; vbCrLf &amp; _
            "Dans  CSordFormColumn.CheckForm," &amp; vbCrLf &amp; _
            Switch(Erl = 0, vbNullString, Erl &lt;&gt; 0, vbCrLf &amp; "Ligne No: " &amp; Erl)
    m_bCheckOk = False
    Resume SORTIE_CheckForm
End Sub
' ----------------------------------------------------------------
' Procedure Nom:    CheckButton
' Sujet:            Vérifier si bouton défini suivant les options choisi.
' Procedure Kind:   Sub
' Procedure Access: Private
' Parameter NewButton (CommandButton):
' Return Type:      Boolean TRUE si pas de problème.
' Author:           Laurent
' Date:             20/04/2022 - 06:45
' DateModif:        22/04/2022 - 09:06
' ----------------------------------------------------------------
Private Sub CheckButton(NewButton As CommandButton)
    On Error GoTo ERR_CheckButton
    '// Initialise le bouton.
    If (m_objButton Is Nothing) Then
        Set m_objButton = NewButton
    ElseIf (m_objButton.Name &lt;&gt; NewButton.Name) Then
        Set m_objButton = NewButton
    End If
    m_bCheckOk = True
SORTIE_CheckButton:
    Exit Sub
ERR_CheckButton:
    MsgBox "Erreur " &amp; Err.Number &amp; vbCrLf &amp; _
            " (" &amp; Err.Description &amp; ")" &amp; vbCrLf &amp; _
            "Dans  SordFormCc.CSordFormColumn.CheckButton, ligne " &amp; Erl &amp; "."
    m_bCheckOk = False
    Resume SORTIE_CheckButton
End Sub
' ----------------------------------------------------------------
' Procedure Nom:    CheckFieldName
' Sujet:            Vérifier si la table contient des enrg et si nom du champ valide...
'                   Si tout vas bien m_bCheckOk est mis a True.
' Procedure Kind:   Sub
' Procedure Access: Private
'
'=== Paramètres ===
' sField (String): Nom du champ à vérifier.
'==================
'
' Author:  Laurent
' Date:    19/04/2022 - 11:35
' DateMod: 01/05/2022 - 13:4
'
' ----------------------------------------------------------------
Private Sub CheckFieldName(ByRef sField As String)
    On Error GoTo ERR_CheckFieldName
    m_bCheckOk = IIf((DCount(sField, m_objForm.RecordSource) = 0), False, True)
SORTIE_CheckFieldName:
    Exit Sub
ERR_CheckFieldName:
    If ((Err.Number = 3265) Or (Err.Number = 2471)) Then
        MsgBox "Le champ '" &amp; sField &amp; "' n'existe pas dans la source de donnée, vérifier la valeur de .FieldName", vbExclamation, "Classe SordFormColumn"
    Else
        MsgBox "Erreur " &amp; Err.Number &amp; " (" &amp; Err.Description &amp; ") Dans CheckFieldName." &amp; Switch(Erl = 0, "", Erl &lt;&gt; 0, vbCrLf &amp; "Ligne No: " &amp; Erl)
    End If
    m_bCheckOk = False
    Resume SORTIE_CheckFieldName
End Sub
' ----------------------------------------------------------------
' Procedure Nom:    CheckPrefixSuffix
' Sujet:            Vérifier si retirer un Préfixe/Suffixe sur le nom du commandButton pour extraire le nom du champs à utiliser.
' Procedure Kind:   Function
' Procedure Access: Private
'
'=== Paramètres ===
' sCmbName (String): Nom du commandButton
'==================
'
' Return Type: String Retourne le nom du champs à utiliser.
'
' Author:   Laurent
' Date:     22/04/2022 - 10:51
' DateMod:  01/05/2022 - 12:54
' ----------------------------------------------------------------
Private Function CheckPrefixSuffix(sCmbName As String) As String
    Dim sResult As String
    Dim lTemp   As Long
    lTemp = Len(sCmbName)
    '// Len valide ?
    If ((Len(m_iFieldSuffixLen) + (Len(m_iFieldPrefixLen)) &gt;= lTemp)) Then
        m_iFieldSuffixLen = 0: m_iFieldPrefixLen = 0
    End If
    '// Applique préfixe.
    If (m_iFieldPrefixLen &gt; 0) Then
        sResult = Right$(sCmbName, lTemp - m_iFieldPrefixLen)
        sCmbName = sResult
    End If
    '// Applique suffixe.
    If (m_iFieldSuffixLen &gt; 0) Then
        lTemp = Len(sCmbName)
        sResult = Left$(sCmbName, lTemp - m_iFieldSuffixLen)
    End If
    CheckPrefixSuffix = sResult
End Function
Private Function CheckFileExist(ByVal sFullPathFile As String) As Boolean
    Dim oFSO            As Object
    Set oFSO = GetFSO
    CheckFileExist = oFSO.FileExists(sFullPathFile)
    Set oFSO = Nothing
End Function
'Returns True if the folder exists (and is accessible)
' - trailing backslash is completely optional
' - returns False if the full path to an existing file is passed
'   to the function (and not just the folder part)
Private Function CheckFolderExists(ByVal PathToFolder As String) As Boolean
    Dim oFSO As Object
    Dim bRes As Boolean
    Set oFSO = GetFSO
    bRes = oFSO.FolderExists(PathToFolder)
    Set oFSO = Nothing
    CheckFolderExists = bRes
    Set oFSO = Nothing
End Function
'// #####################################################################################</Code>
</T_Info>
<T_Info>
<ID_Info>CodeFrm</ID_Info>
<ID_Lang>1036</ID_Lang>
<Code>Private VARCLS As CsordFormColumn
Private Function FUNCNAME(Optional eActiveImage As T_OnOff = OptionOff, _
                            Optional eActiveTexte As T_OnOff = OptionOn, _
                            Optional sPicAsc As String = vbNullString, _
                            Optional sPicDesc As String = vbNullString, _
                            Optional sFieldName As String = vbNullString) As Boolean
    Dim bRet As Boolean
    '// Initialisation de la classe, on peut indiquer, si besoin, le préfixe et/ou le suffixe (nb de car).
    '// Init class and defined suffix (the class cuts automatically the button name for extact field name)
    If (VARCLS Is Nothing) Then
        Set VARCLS = New CsordFormColumn
        VARCLS.FieldPrefixLen = LENPREF
        VARCLS.FieldSuffixLen = LENSUFF
    End If
    With m_CSordForm
        .PictureOn = eActiveImage   '// Optional (Default Off) si On, active les images par defaut.
        .TexteOn = eActiveTexte     '// Optional (Default On)
        '.TexteColor = 2366701       '// Optional (Default see const 'TXT_COULSORD' in class)
        '.PicturePath = "\Res\"      '// Optional (Sous dossier des images, Default CurrentProject.Path + Const 'IMG_FOLDER' in class)
        .PictureASC = sPicAsc       '// Optional (see const 'IMG_ASC' in class)
        .PictureDESC = sPicDesc     '// Optional (see const 'IMG_DESC' in class)
        bRet = .SordNow(sFieldName)     '// Execute le tri, retour TRUE if ok, 'sFieldName' is optional.
    End With
    FUNCNAME=bRet
    CTRFOCUS.SetFocus
End Function</Code>
</T_Info>
<T_Info>
<ID_Info>F_infsvBdD</ID_Info>
<InfoTitre>Sauvegarde de la base…</InfoTitre>
<InfoTexte>Avant l'exécution la base %bdo%
seras sauvegardée
sous le nom %bdb%
dans le dossier %fold%</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>lstFields</ID_Info>
<InfoTitre>Liste contenant les champs de la table / requêtes sélectionnée.</InfoTitre>
<InfoTexte>Liste a sélection multiple, sélectionnez tous les champs que vous voulez intégrer dans le formulaire.
La classe 'CCreateFormContinu' se serviras de ses noms pour créer les TextBox, CommandButton, le code du formulaire et automatiser l'utilisation de la classe 'CsordFormColumn'.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>lstObjets</ID_Info>
<InfoTitre>Liste des tables / requêtes trouvées dans la base.</InfoTitre>
<InfoTexte>Permet de définir la source du formulaire.
Sélectionnez une table / requêtes, elle serviras de source(RecordSource) pour le formulaire.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtBdd</ID_Info>
<InfoTitre>Base de données à utiliser.</InfoTitre>
<InfoTexte>Sélection de la base dans laquelle créer le formulaire.
Après sélection la liste des tables/requêtes seras remplie,</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtClasseName</ID_Info>
<InfoTitre>Nom de la variable créer dans le formulaire (Champ obligatoire)</InfoTitre>
<InfoTexte>La classe 'CsordFormContinu' seras déclarée en entête du formulaire avec ce nom de variable :
Dim CSordForm as CsordFormContinu
Utiliser ce nom par défaut ou saisissez un nouveau nom.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtCmb</ID_Info>
<InfoTitre>Préfixe / Suffixe pour la création des CommandButton (Champ obligatoire).</InfoTitre>
<InfoTexte>Saisie obligatoire, vous pouvez saisie soit l'un soit l'autre soit les deux, mais au moins un des deux (pour éviter des confis de noms) :
'ID_Customer_cmb' par défaut.
Lors de la création des boutons, la classe utilise le nom des champs sélectionnés dans la liste, pour définir le nom des CommandButton.
Cela permet d'automatisé le processus, et vous évite d'avoir a saisir le nom de chaque champs avant le tri.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtFormName</ID_Info>
<InfoTitre>Nom du formulaire à créer. (Champ obligatoire)</InfoTitre>
<InfoTexte>La classe utiliseras ce nom 'pour créer le formulaire dans la base.
Par défaut, prend le nom de la source préfixé 'F_'.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtFormSource</ID_Info>
<InfoTitre>Source du formulaire</InfoTitre>
<InfoTexte>Table ou requête source pour le formulaire.
La sélection se fait dans la liste a gauche (Objets de ma base),</InfoTexte>
<ID_Lang>0</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtFunctionName</ID_Info>
<InfoTitre>Nom de la 'Function' du formulaire (Champ obligatoire)</InfoTitre>
<InfoTexte>Fonction intégrée dans le formulaire, et qui utilise la classe 'CsordFormContinu' :
Private Function SordColumn( …..
Utiliser ce nom par défaut ou saisissez un nouveau nom.
Les évènements '_Click' sur les CommandButton, sont créer automatique et appel cette fonction.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtPic</ID_Info>
<InfoTitre>Images utiliser pour le tri ASC/DESC (Non obligatoire).</InfoTitre>
<InfoTexte>Utilisez des images 16x16 en .png, et placer les dans le dossier choisi.
Saisie non obligatoire, si vous indiquer quelque chose de non valide, la classe géreras l'erreur et vous avertiras.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtPicFolder</ID_Info>
<InfoTitre>Nom du dossier contenant les images (Non obligatoire).</InfoTitre>
<InfoTexte>Ce doissier DOIT être un sous-dossier de l'application,
Les images seront affichées dans les CommandButton lors du tri (par ex une flèche vers le bas/haut).</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
<T_Info>
<ID_Info>txtTb</ID_Info>
<InfoTitre>Préfixe / Suffixe à utiliser pour la création des TextBox (Champ obligatoire).</InfoTitre>
<InfoTexte>Saisie obligatoire, vous pouvez saisie soit l'un soit l'autre soit les deux, mais au moins un des deux (pour éviter des confis de noms)
'ID_Customer_txt' par défaut.
Cela n'as aucune importance pour la classe, elle utilise le nom de la source(ControlSource) de la TextBox pour le tri.</InfoTexte>
<ID_Lang>1036</ID_Lang>
<Code></Code>
</T_Info>
</dataroot>
